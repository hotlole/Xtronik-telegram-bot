from aiogram import Bot, Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from create_bot import bot
from . import problem_handler
from aiogram.types import FSInputFile
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


start_router = Router()

# ID –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
GROUP_ID = -4647347489

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
class ProblemSelection(StatesGroup):
    waiting_for_problem = State()
    waiting_for_custom_problem = State()

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞
menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="CHAdeMO - GB/T", callback_data="adapter_chademo_gbt"),
     InlineKeyboardButton(text="CCS2 - GB/T", callback_data="adapter_ccs2_gbt")],
    [InlineKeyboardButton(text="CHAdeMO - CCS", callback_data="adapter_chademo_ccs"),
     InlineKeyboardButton(text="GB/T - CCS2", callback_data="adapter_gbt_ccs2")]
])
# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–°—Ç–∞—Ä—Ç"
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöÄ –°—Ç–∞—Ä—Ç")]
    ],
    resize_keyboard=True  # –ü–æ–¥–≥–æ–Ω—è–µ–º –ø–æ–¥ —ç–∫—Ä–∞–Ω
)

# –ö–æ–º–∞–Ω–¥–∞ /start (—Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∫–Ω–æ–ø–∫—É "üöÄ –°—Ç–∞—Ä—Ç")
@start_router.message(F.text == "üöÄ –°—Ç–∞—Ä—Ç")
@start_router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Xtronik, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ —Å –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–∞–º–∏ –¥–ª—è –∑–∞—Ä—è–¥–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–∞, —Å –∫–æ—Ç–æ—Ä—ã–º —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º–∞:",
        reply_markup=menu  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞
    )
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞
@start_router.callback_query(F.data.startswith("adapter_"))
async def handle_adapter_selection(callback: CallbackQuery, state: FSMContext):
    adapter_type = callback.data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä
    await state.update_data(adapter=adapter_type)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=problems_menu()
    )
    await state.set_state(ProblemSelection.waiting_for_problem)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
def problems_menu() -> InlineKeyboardMarkup:
    problems = [
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–æ–º",
        "–û–±—Ä—ã–≤ –∑–∞—Ä—è–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏",
        "–ù–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∑–∞—Ä—è–¥–Ω–∞—è —Å–µ—Å—Å–∏—è",
        "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ",
        "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
    ]
    buttons = [
        [InlineKeyboardButton(text=problem, callback_data=str(i))]
        for i, problem in enumerate(problems)
    ]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_adapters")])  # –î–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥"
@start_router.callback_query(F.data == "back_to_adapters")
async def back_to_adapters(callback: CallbackQuery, state: FSMContext):
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–∞, —Å –∫–æ—Ç–æ—Ä—ã–º —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º–∞:",
        reply_markup=menu  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º—ã
@start_router.callback_query(ProblemSelection.waiting_for_problem)
async def handle_problem_selection(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    adapter_type = data.get("adapter")

    if callback.data == "cancel":
        await state.clear()
        await callback.message.answer("–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    if not callback.data.isdigit():
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ–±–ª–µ–º—ã.")
        return

    problem_index = int(callback.data)
    problems_list = [
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–æ–º",
        "–û–±—Ä—ã–≤ –∑–∞—Ä—è–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏",
        "–ù–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∑–∞—Ä—è–¥–Ω–∞—è —Å–µ—Å—Å–∏—è",
        "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ",
        "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
    ]

    problem_title = problems_list[problem_index]

    if problem_index == 4:  # "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
        await callback.message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º –≤–∞–º:")
        await state.set_state(ProblemSelection.waiting_for_custom_problem)
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã
    problem_description = problem_handler.get_problem_description(adapter_type, problem_index)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è CCS2-GBT
    if adapter_type == "adapter_ccs2_gbt" and problem_index == 2:
        problem_description += (
            "\n\nüî¥–í–∞–∂–Ω–æ: –≠—Ç–∞–ø—ã –∑–∞—Ä—è–¥–∫–∏ CCS2-GBT\n\n"
            "‚ö™–ë–µ–ª—ã–π (5 —Å–µ–∫.) ‚Äì –ó–∞–≥—Ä—É–∑–∫–∞\n"
            "üü£–§–∏–æ–ª–µ—Ç–æ–≤—ã–π ‚Äì –ì–æ—Ç–æ–≤–∞ –∫ —Å—Ç–∞—Ä—Ç—É –∑–∞—Ä—è–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏\n\n"
            "‚ú®–ú–æ—Ä–≥–∞–Ω–∏–µ (–≥–æ—Ç–æ–≤ –∫ –∑–∞—Ä—è–¥—É):\n"
            "üü¢–ó–µ–ª–µ–Ω—ã–π ‚Äì –ë–∞—Ç–∞—Ä–µ—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä—è–∂–µ–Ω–∞\n"
            "üîµ–°–∏–Ω–∏–π ‚Äì –û—Å—Ç–∞–ª–æ—Å—å 30-70% –∑–∞—Ä—è–¥–∞\n"
            "üî¥–ö—Ä–∞—Å–Ω—ã–π ‚Äì –ë–∞—Ç–∞—Ä–µ—è —Ä–∞–∑—Ä—è–∂–µ–Ω–∞\n\n"
            "‚ö™–ë–µ–ª—ã–π (–∫–æ—Ä–æ—Ç–∫–æ–µ –≥–æ—Ä–µ–Ω–∏–µ) ‚Äì –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–∏ —Å–æ —Å—Ç–∞–Ω—Ü–∏–µ–π\n"
            "üåä–ë–∏—Ä—é–∑–æ–≤—ã–π ‚Äì –ù–∞—á–∞—Ç –æ–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏\n"
            "üü¢–ó–µ–ª–µ–Ω—ã–π (–≥–æ—Ä–µ–Ω–∏–µ) ‚Äì –ò–¥–µ—Ç –∑–∞—Ä—è–¥–∫–∞\n\n"
            "–ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫ –º–æ—Ä–≥–∞–µ—Ç –∫—Ä–∞—Å–Ω—ã–º, –∑–Ω–∞—á–∏—Ç –æ–Ω —Ä–∞–∑—Ä—è–∂–µ–Ω. –ó–∞—Ä—è–¥–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º! üîã"
        )
        animation = FSInputFile("media/gifka.gif")
        await bot.send_animation(chat_id=callback.message.chat.id, animation=animation)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
    await callback.message.answer(problem_description)

    # –¢—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º –≤ –≥—Ä—É–ø–ø—É —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    await bot.send_message(
        GROUP_ID,
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username or callback.from_user.full_name}\n"
        f"üîå –ê–¥–∞–ø—Ç–µ—Ä: {adapter_type.replace('adapter_', '').upper()}\n"
        f"‚ùó –ü—Ä–æ–±–ª–µ–º–∞: {problem_title}"
    )

    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã
@start_router.message(ProblemSelection.waiting_for_custom_problem)
async def handle_custom_problem(message: Message, state: FSMContext):
    data = await state.get_data()
    adapter_type = data.get("adapter")
    custom_problem = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.")

    # –¢—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≥—Ä—É–ø–ø—É
    await bot.send_message(
        GROUP_ID,
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.full_name}\n"
        f"üîå –ê–¥–∞–ø—Ç–µ—Ä: {adapter_type.replace('adapter_', '').upper()}\n"
        f"‚ùó –ü—Ä–æ–±–ª–µ–º–∞: {custom_problem}\n"
    )

    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
