 
Структура проекта

Aiogram_run.py
Файл запуска!!
# Импорт необходимых модулей
import asyncio  # Для работы с асинхронными функциями
import logging  # Для настройки системы логирования
from create_bot import bot, dp  # Импорт экземпляров бота и диспетчера из кастомного модуля
from handlers.start import start_router  # Импорт роутера для обработки стартовых команд

# Настройка системы логирования
logging.basicConfig(level=logging.INFO)  # Устанавливаем базовый уровень логирования INFO
logger = logging.getLogger(__name__)  # Создаем логгер для текущего модуля

async def main():
"""
Главная асинхронная функция для настройки и запуска бота.
"""
# Регистрация роутеров
dp.include_router(start_router)  # Подключаем стартовый роутер к диспетчеру

try:
# Удаление вебхука (актуально для веб-серверов, предотвращает дублирование обновлений)
await bot.delete_webhook(drop_pending_updates=True)

# Запуск процесса опроса сервера Telegram на наличие обновлений
await dp.start_polling(bot)

except Exception as e:
# Обработка исключений с записью в лог
logger.error(f"An error occurred: {e}")

finally:
# Гарантированное закрытие сессии бота при завершении работы
await bot.session.close()

if __name__ == "__main__":
# Запуск асинхронного event loop
asyncio.run(main())


problem_handler.py
def get_problem_description(adapter_type: str, problem_index: str) -> str:
   # Словарь с проблемами для каждого типа адаптера
    problems = {
        "adapter_chademo_gbt": [
            "Как пользоваться этим переходником",
            "Обрыв зарядной сессии",
            "Не запускается зарядная сессия",
            "Получить список станций, на которых переходники работают стабильно",
            "Другая проблема"
        ],
        "adapter_ccs2_gbt": [
            "Как пользоваться этим переходником",
            "Обрыв зарядной сессии",
            "Не запускается зарядная сессия",
            "Получить список станций, на которых переходники работают стабильно",
            "Другая проблема"
        ],
        "adapter_chademo_ccs": [
            "Как пользоваться этим переходником",
            "Обрыв зарядной сессии",
            "Не запускается зарядная сессия",
            "Получить список станций, на которых переходники работают стабильно",
            "Другая проблема"
        ],
        "adapter_gbt_ccs2": [
            "Как пользоваться этим переходником",
            "Обрыв зарядной сессии",
            "Не запускается зарядная сессия",
            "Получить список станций, на которых переходники работают стабильно",
            "Другая проблема"
        ]
    }
    # Словарь с описаниями проблем
    problem_descriptions = {
        "Как пользоваться этим переходником": (
            "Определите разъёмы – Убедитесь, что переходник подходит для вашей зарядной станции и электромобиля.\n"
            "Подключите – Вставьте переходник в разъём автомобиля, затем подключите кабель от станции.\n"
            "Запустите зарядку – При необходимости авторизуйтесь (карта, приложение) и начните зарядку.\n"
            "Завершите – Остановите зарядку, отключите кабель, затем снимите переходник.\n"
            "Важно: Используйте сертифицированные переходники, не перегружайте их и храните в сухом месте."
        ),
        "Обрыв зарядной сессии": (
            "Если обрыв зарядной сессии, попробуйте следующее:\n"
            "1. Проверьте соединения – Убедитесь, что переходник и кабель плотно вставлены.\n"
            "2. Перезагрузите станцию – Если возможно, перезапустите зарядную станцию или попробуйте другую.\n"
            "3. Авторизация – Проверьте, правильно ли вы прошли аутентификацию (карта, приложение, оплата).\n"
            "4. Совместимость – Убедитесь, что переходник поддерживает ваш авто и станцию.\n"
            "5. Попробуйте другой кабель – Возможно, проблема в самом зарядном кабеле.\n"
            "6. Перезapustite электромобиль – Иногда помогает отключение и включение питания авто.\n"
            "7. Свяжитесь с поддержкой – Если ничего не помогло, обратитесь в службу поддержки зарядной станции."
        ),
        "Не запускается зарядная сессия": (
            "Если зарядная сессия не запускается, попробуйте следующее:\n"
            "1. Проверьте соединения – Убедитесь, что переходник и кабель плотно вставлены.\n"
            "2. Перезagрузite станцию – Если возможно, перезапустите зарядную станцию или попробуйте другую.\n"
            "3. Авторизация – Проверьте, правильно ли вы прошли аутентификацию (карта, приложение, оплата).\n"
            "4. Совместимость – Убедитесь, что переходник поддерживает ваш авто и станцию.\n"
            "5. Попробуйте другой кабель – Возможно, проблема в самом зарядном кабеле.\n"
            "6. Перезapustite электромобиль – Иногда помогает отключение и включение питания авто.\n"
            "7. Свяжитесь с поддержкой – Если ничего не помогло, обратитесь в службу поддержки зарядной станции."
        ),
        "Получить список станций, на которых переходники работают стабильно": (
            "Список станций, на которых переходники работают стабильно:\n"
            "1. ABB\n"
            "2. Punkt-e\n"
            "3. Энергия Москвы (50 и 60квт, 80квт)\n"
            "4. Парус\n"
            "5. NSP\n"
            "6. Pandora\n"
            "7. Промэлектроника\n"
            "8. Русгидро\n"
            "9. Rosseti\n"
            "10. Malanka (Беларусь)\n"
            "И другие..."
        )
    }
    # Получение текста проблемы и поиск описания
    problem_text = problems.get(adapter_type, [])[int(problem_index)]
    return problem_descriptions.get(problem_text, "Опишите вашу проблему, и мы обязательно поможем вам:")


create_bot.py
# Импорт необходимых модулей
import logging  # Для настройки системы логирования
from aiogram import Bot, Dispatcher  # Основные классы aiogram
from aiogram.client.default import DefaultBotProperties  # Настройки бота по умолчанию
from aiogram.enums import ParseMode  # Режимы парсинга сообщений
from aiogram.fsm.storage.memory import MemoryStorage  # Хранилище состояний в памяти
from decouple import config  # Для работы с переменными окружения
from apscheduler.schedulers.asyncio import AsyncIOScheduler  # Асинхронный планировщик задач

# Настройка системы логирования
logging.basicConfig(level=logging.INFO)  # Установка базового уровня логирования (INFO и выше)
logger = logging.getLogger(__name__)  # Создание именованного логгера для текущего модуля

# Инициализация экземпляра бота
bot = Bot(
    token=config('TOKEN'),  # Получение токена из переменных окружения
    default=DefaultBotProperties(
        parse_mode=ParseMode.HTML  # Установка HTML-форматирования по умолчанию
    )
)

# Инициализация диспетчера
dp = Dispatcher(
    storage=MemoryStorage()  # Использование in-memory хранилища для FSM
)

# Инициализация планировщика задач
scheduler = AsyncIOScheduler()  # Создание асинхронного планировщика

# Экспортируемые объекты
__all__ = ['bot', 'dp', 'scheduler']  # Определение публичного API модуля


Start.py
# Импорт необходимых компонентов
from aiogram import Bot, Router, F  # Базовые классы aiogram
from aiogram.filters import CommandStart  # Фильтр для команды /start
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup  # Типы Telegram объектов
from aiogram.fsm.context import FSMContext  # Контекст машины состояний
from aiogram.fsm.state import StatesGroup, State  # Базовые классы для FSM
from create_bot import bot  # Импорт экземпляра бота
from . import problem_handler  # Модуль для обработки проблем
from aiogram.types import FSInputFile  # Работа с файлами
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton  # Клавиатуры

# Инициализация роутера
start_router = Router()

# ID группы для уведомлений
GROUP_ID = -4647347489

# Класс состояний FSM
class ProblemSelection(StatesGroup):
    waiting_for_problem = State()  # Ожидание выбора проблемы
    waiting_for_custom_problem = State()  # Ожидание описания проблемы

# Меню выбора адаптера (4 кнопки в 2 ряда)
menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="CHAdeMO - GB/T", callback_data="adapter_chademo_gbt"),
     InlineKeyboardButton(text="CCS2 - GB/T", callback_data="adapter_ccs2_gbt")],
    [InlineKeyboardButton(text="CHAdeMO - CCS", callback_data="adapter_chademo_ccs"),
     InlineKeyboardButton(text="GB/T - CCS2", callback_data="adapter_gbt_ccs2")]
])

# Главная клавиатура с кнопкой старта
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="🚀 Старт")]  # Кнопка запуска
    ],
    resize_keyboard=True  # Адаптация под размер экрана
)

# Обработчик команды /start
@start_router.message(F.text == "🚀 Старт")
@start_router.message(CommandStart())
async def cmd_start(message: Message):
    """Инициализация диалога, вывод меню выбора адаптера"""
    await message.answer(
        "Привет! Это бот Xtronik...",  # Приветственное сообщение
        reply_markup=menu  # Отображение меню адаптеров
    )

# Обработчик выбора адаптера
@start_router.callback_query(F.data.startswith("adapter_"))
async def handle_adapter_selection(callback: CallbackQuery, state: FSMContext):
    """Обработка выбора типа адаптера"""
    await state.update_data(adapter=callback.data)  # Сохранение в FSM
    await callback.message.edit_text(  # Редактирование сообщения
        "Выберите тип проблемы:",
        reply_markup=problems_menu()  # Показ меню проблем
    )
    await state.set_state(ProblemSelection.waiting_for_problem)

# Генератор меню проблем
def problems_menu() -> InlineKeyboardMarkup:
    """Создание инлайн-клавиатуры с списком проблем"""
    problems = [...]  # Список проблем
    buttons = [
        [InlineKeyboardButton(...)]  # Генерация кнопок
        for i, problem in enumerate(problems)
    ]
    buttons.append([InlineKeyboardButton(text="🔙 Назад", callback_data="back_to_adapters")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# Обработчик кнопки "Назад"
@start_router.callback_query(F.data == "back_to_adapters")
async def back_to_adapters(callback: CallbackQuery, state: FSMContext):
    """Возврат к выбору адаптера"""
    await state.clear()  # Сброс состояния
    await callback.message.edit_text(...)  # Показ предыдущего меню

# Обработчик выбора проблемы
@start_router.callback_query(ProblemSelection.waiting_for_problem)
async def handle_problem_selection(callback: CallbackQuery, state: FSMContext):
    """Обработка выбранной проблемы"""
    # Получение данных из FSM
    data = await state.get_data()
    adapter_type = data.get("adapter")

    # Валидация callback данных
    if callback.data == "cancel": ...  # Обработка отмены
    if not callback.data.isdigit(): ...  # Проверка формата

    problem_index = int(callback.data)
    
    # Обработка кастомной проблемы
    if problem_index == 4: 
        await state.set_state(ProblemSelection.waiting_for_custom_problem)
        return

    # Получение описания проблемы
    problem_description = problem_handler.get_problem_description(...)

    # Специфичная логика для CCS2-GBT
    if adapter_type == "adapter_ccs2_gbt" and problem_index == 2:
        problem_description += ...  # Дополнительная информация
        animation = FSInputFile("media/gifka.gif")  # Загрузка анимации
        await bot.send_animation(...)  # Отправка файла

    # Отправка ответа пользователю
    await callback.message.answer(problem_description)

    # Уведомление в группу
    await bot.send_message(
        GROUP_ID,
        f"👤 Пользователь: ...\n"  # Форматированное сообщение
        f"🔌 Адаптер: ...\n"
        f"❗ Проблема: ..."
    )

    await state.clear()  # Сброс состояния

# Обработчик текстового ввода
@start_router.message(ProblemSelection.waiting_for_custom_problem)
async def handle_custom_problem(message: Message, state: FSMContext):
    """Обработка пользовательского описания проблемы"""
    # Получение данных и текста
    data = await state.get_data()
    custom_problem = message.text

    # Подтверждение и уведомление
    await message.answer("Спасибо!...")
    await bot.send_message(GROUP_ID, ...)

    await state.clear()  # Финализация состояния

[Пользователь]
  │
  ├── /start → Показ меню адаптеров
  │
  ├── Выбор адаптера → Показ меню проблем
  │   │
  │   ├── Выбор проблемы → Обработка + уведомление
  │   │
  │   └── Назад → Возврат к адаптерам
  │
  └── Кастомный ввод → Сохранение + уведомление


.env
файл с переменными окружения
TOKEN=7523000514:AAFA1TH-sCRC4eThknPW-jeDwHWsgjCWk5I
ADMINS=00000000,000000001
PG_LINK=postgresql://USER_LOGIN:USER_PASSWORD@HOST_API:PORT/NAME_BD





Dockerfile
# Используем базовый образ Python
FROM python:3.9-slim

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем файлы проекта в контейнер
COPY . /app

# Устанавливаем зависимости
RUN pip install --no-cache-dir -r requirements.txt

# Указываем команду для запуска приложения
CMD ["python", "aiogram_run.py"]
COPY media/gifka.gif /app/gifka.gif
COPY media /app/media



Requirements.txt
asyncpg
aiogram
APScheduler
python-decouple


-Список необходимых билиотек






Так же прикладываю ссылку репозитория на github:
https://github.com/hotlole/Xtronik-telegram-bot
